function parseMultiFormatData() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const inputSheet = ss.getSheetByName("シート1");
  const outputSheet = ss.getSheetByName("抽出結果") || ss.insertSheet("抽出結果");

  // Remove every other sheet except シート1 and 抽出結果
  ss.getSheets().forEach(sheet => {
    const name = sheet.getName();
    if (name !== "シート1" && name !== "抽出結果") {
      ss.deleteSheet(sheet);
    }
  });

  let rawText = inputSheet.getRange("A1").getValue();
  // Normalize different yen symbols to a standard form so regex patterns match
  rawText = rawText.replace(/[\\￥]/g, '¥');
  // 改行がない連続データでも各明細を抽出できるよう、日付付き明細パターン毎に改行を補完
  const dateBlock = /(\d{4}\/\d{2}\/\d{2}\s+[^¥]+?\s+¥[\d,]+\s+\d+\s+¥[\d,]+)/g;
  rawText = rawText.replace(dateBlock, '$1\n');
  const lines = rawText.split(/\r?\n/).map(line => line.trim()).filter(Boolean);

  let date = "", client = "", project = "", itemText = "";
  const output = [];

  for (let i = 0; i < lines.length; i++) {
    const line = lines[i];
    let m;

    // 請求書風情報
    if (line.startsWith("納品日")) {
      const m = line.match(/(\d{4}\/\d{1,2}\/\d{1,2})/);
      if (m) date = m[1];
    }
    if (line.startsWith("広告主")) client = line.replace("広告主", "").trim();
    if (line.startsWith("案件名")) project = line.replace("案件名", "").trim();
    if (line.startsWith("内容")) itemText = lines[i + 1];

    // パターン①：AF成果形式
    const afPattern = /([^：:]+?)\s*[：:]\s*(\d+)件\s*×\s*([\d,]+)円/g;
    let afMatch;
    let matched = false;
    while ((afMatch = afPattern.exec(line)) !== null) {
      const name = afMatch[1].trim();
      // 件数と単価は手入力とするため空欄を出力
      output.push(["", "", "", name, "", "", ""]);
      matched = true;
    }
    if (matched) continue;

    // パターン②：再生数課金形式
    m = line.match(/^・(.+?)\s+¥([\d,]+).*?（([\d,]+)再生×([\d.]+)円）/);
    if (m) {
      const name = m[1].trim();
      // 件数と単価は手入力とするため空欄を出力
      output.push(["", "", "", name, "", "", ""]);
      continue;
    }

    // パターン③：日付付き明細
    m = line.match(/^(\d{4}\/\d{2}\/\d{2})\s+(.+?)\s+¥([\d,]+)\s+(\d+)\s+¥([\d,]+)/);
    if (m) {
      const [_, dt, name] = m;
      // 件数と単価は手入力とするため空欄を出力
      output.push([dt, "", "", name.trim(), "", "", ""]);
      continue;
    }

    // パターン④：単価と件数を括弧で表記した明細
    const qtyInParenPattern = /(.+?)\s+¥([\d,]+)\s*\((\d+)\)\s+¥([\d,]+)/g;
    let qpMatch;
    matched = false;
    while ((qpMatch = qtyInParenPattern.exec(line)) !== null) {
      const name = qpMatch[1].trim();
      // 件数と単価は手入力とするため空欄を出力
      output.push(["", "", "", name, "", "", ""]);
      matched = true;
    }
    if (matched) continue;

    // パターン⑤：請求書風明細
    m = line.match(/^¥([\d,]+)\s+(\d+)\s+¥([\d,]+)/);
    if (m && itemText) {
      const names = itemText.split("、").map(n => n.trim());
      for (let name of names) {
        // 件数と単価は手入力とするため空欄を出力
        output.push([date, client, project, name, "", "", ""]);
      }
      itemText = ""; // 1回使ったらリセット
      continue;
    }
  }

  // 出力：ヘッダー付き
  outputSheet.clearContents();
  if (output.length > 0) {
    outputSheet.getRange(1, 1, 1, 7).setValues([["日付", "広告主", "案件名", "商品名", "単価", "件数", "金額"]]);
    outputSheet.getRange(2, 1, output.length, 7).setValues(output);

    const formulas = [];
    for (let i = 0; i < output.length; i++) {
      formulas.push([`=E${i + 2}*F${i + 2}`]);
    }
    outputSheet.getRange(2, 7, output.length, 1).setFormulas(formulas);

    const sumRow = output.length + 2;
    outputSheet.getRange(sumRow, 7).setFormula(`=SUM(G2:G${sumRow - 1})`);
  } else {
    outputSheet.getRange("A1").setValue("抽出データが見つかりませんでした。");
  }
}
